<?xml version='1.0' encoding='UTF-8'?>
<odoo>
  <record id="rfq_merge.server_action" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" ref="purchase.model_purchase_order"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}

vendor_warning = False
confirmed_warning = False
cancelled_warning = False
locked_warning = False
picking_type_warning = False
count_warning = False
vendor_msg = "Merge only works when all selected RFQ's are from the same Vendor.\n\nIn your selection you have RFQ's from: "
confirmed_msg = "Merge only works on RFQ's.\n\nIn your selection you have confirmed Purchase Order(s): "
cancelled_msg = "Merge only works on RFQ's.\n\nIn your selection you have cancelled Purchase Order(s): "
locked_msg = "Merge only works on RFQ's.\n\nIn your selection you have locked Purchase Order(s): "
picking_type_msg = "Merge only works on RFQ's being received to the same location.\n\nIn your selection you have multiple 'Deliver To' locations.\n\nPlease group by 'Deliver To' in the list to resolve this."
count_msg = "Merge only works when you have more than one RFQ selected!"

vendor = False
picking_type = False
notes = ''
lines = []
rfq_list = []

for record in records.sorted(key=lambda r: r.name):
    if len(records) == 1:
      count_warning = True
    if not vendor:
      vendor = record.partner_id
    if not vendor == record.partner_id:
      vendor_warning = True
      vendor_msg += '%s, ' % (record.partner_id.name)
    if not picking_type:
      picking_type = record.picking_type_id.id
    if not picking_type == record.picking_type_id.id:
      picking_type_warning = True
    if record.state == 'purchase':
      confirmed_warning = True
      confirmed_msg += '%s, ' % (record.name)
    if record.state == 'cancel':
      cancelled_warning = True
      cancelled_msg += '%s, ' % (record.name)
    if record.state == 'done':
      locked_warning = True
      locked_msg += '%s, ' % (record.name)
    if record.display_name not in rfq_list:
      rfq_list.append(record.display_name)
    if record.notes:
      if len(notes) > 1:
        notes += '\n' + record.notes
      else:
        notes += record.notes
    lines.append((0, 0, {
      'display_type' : 'line_section',
      'name': '',
      'product_qty' : 0,
      'price_unit': 0.0,
    }))   
    for order_line in record.order_line:
      lines.append((0, 0, {
        'display_type': order_line.display_type,
        'product_id': order_line.product_id and order_line.product_id.id or False,
        'name': order_line.name,
        'product_qty' : order_line.product_qty,
        'product_uom_qty': order_line.product_uom_qty,
        'product_uom': order_line.product_uom and order_line.product_uom.id or False,
        'price_unit': order_line.price_unit,
        'account_analytic_id': order_line.account_analytic_id and order_line.account_analytic_id.id or False,
        'sale_order_id': order_line.sale_order_id and order_line.sale_order_id.id or False,
        'sale_line_id': order_line.sale_line_id and order_line.sale_line_id.id or False,
        'date_planned': order_line.date_planned,
        'taxes_id': order_line.taxes_id,
      }))
    if record.origin and record.partner_ref:
      name_string = 'Your Reference: ' + record.partner_ref + ' (Our Note: ordered for ' + record.origin + ')'
    elif record.origin:
      name_string = 'Our Note: ordered for ' + record.origin
    elif record.partner_ref:
      name_string = 'Your reference: ' + record.partner_ref
    else:
      name_string = 'Our Note: formerly from ' + record.name
    lines.append((0, 0, {
      'display_type' : 'line_note',
      'name': name_string,
      'product_qty' : 0,
      'price_unit': 0.0,
    }))      
      
if count_warning:
  raise Warning(count_msg)

if vendor_warning:
  raise Warning(vendor_msg[:-2] + ' and ' + vendor.name + '.')

if confirmed_warning:
  raise Warning(confirmed_msg[:-2] + '.')

if cancelled_warning:
  raise Warning(cancelled_msg[:-2] + '.')
  
if locked_warning:
  raise Warning(locked_msg[:-2] + '.')

if picking_type_warning:
  raise Warning(picking_type_msg)
  
for record in records:
  record.button_
()

purchase_order = env['purchase.order'].sudo().create({
  'picking_type_id': picking_type,
  'origin': ', '.join(rfq_list),
  'origin': "Multiple Merged RFQ's",
  'partner_id': vendor.id,
  'user_id': env.uid,
  'notes': notes,
  'order_line': lines,
})

msg = 'Cancelled and merged into <a href="#" data-oe-model="purchase.order" data-oe-id="' + str(purchase_order.id) +'">' + str(purchase_order.name) +'</a>'
      
for record in records:
  record.message_post(body=msg )
  
msg = 'This was merged from '  
for rfq in rfq_list:
  rfq_id = env['purchase.order'].search([('name','=',rfq)]).id
  msg+= ' <a href="#" data-oe-model="purchase.order" data-oe-id="' + str(rfq_id) +'">' + str(rfq) + '</a>, '

purchase_order.message_post(body=msg[:-2] + '.')
  ]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="purchase.model_purchase_order"/>
    <field name="name">Merge RFQ's</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
</odoo>
